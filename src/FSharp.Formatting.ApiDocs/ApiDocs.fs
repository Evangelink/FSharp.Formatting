namespace FSharp.Formatting.ApiDocs

/// This type exposes the functionality for producing documentation model from `dll` files with associated `xml` files
/// generated by the F# or C# compiler. To generate documentation model, use one of the overloades of the `Generate` method.
type ApiDocs =

    /// Generates a documentation model for the assemblies specified by the `inputs` parameter
    ///
    ///  - `inputs` - the components to generate documentation for
    ///  - `substitutions` - provides substitutions for substitution in the templates
    ///  - `qualify` - qualify the output set by collection name, e.g. `reference/FSharp.Core/...`
    ///  - `sourceFolder` and `sourceRepo` - When specified, the documentation generator automatically
    ///    generates links to GitHub pages for each of the entity.
    ///  - `libDirs` - Use this to specify additional paths where referenced DLL files can be found when formatting code snippets inside Markdown comments
    ///  - `otherFlags` - Additional flags that are passed to the F# compiler (you can use this if you want to
    ///    specify references explicitly etc.)
    ///  - `urlRangeHighlight` - A function that can be used to override the default way of generating GitHub links
    ///
    static member GenerateModel(inputs: ApiDocInput list, collectionName, substitutions, ?qualify, ?libDirs, ?otherFlags, ?root, ?urlRangeHighlight) =
        let root = defaultArg root "/"
        let qualify = defaultArg qualify false
        ApiDocModel.Generate(inputs, collectionName=collectionName,
            libDirs=libDirs, qualify=qualify,
            otherFlags=otherFlags,
            urlRangeHighlight=urlRangeHighlight, root=root,
            substitutions=substitutions) 

    /// Generates the search index from the given documentation model
    ///
    ///  - `model` - the model for documentation
    static member SearchIndexEntriesForModel(model: ApiDocModel) =
        GenerateSearchIndex.searchIndexEntriesForModel model 

    /// Like GenerateHtml but allows for intermediate phase to insert other global substitutions
    /// and combine search index
    static member GenerateHtmlPhased(inputs, output, collectionName, substitutions, ?template, ?root, ?qualify, ?libDirs, ?otherFlags, ?urlRangeHighlight) =
        let root = defaultArg root "/"
        let qualify = defaultArg qualify false
        let model =
            ApiDocModel.Generate(inputs, collectionName=collectionName,
                libDirs=libDirs, qualify=qualify, otherFlags=otherFlags, 
                urlRangeHighlight=urlRangeHighlight, root=root, substitutions=substitutions) 
        let renderer = GenerateHtml.HtmlRender(model)
        let index = GenerateSearchIndex.searchIndexEntriesForModel(model)
        renderer.GlobalSubstitutions, index, (fun globalParameters ->
            renderer.Generate(output, template, collectionName, globalParameters))

    /// Generates default HTML pages for the assemblies specified by the `inputs` parameter
    ///
    ///  - `inputs` - the components to generate documentation for
    ///  - `output` - the output directory
    ///  - `collectionName` - the overall collection name
    ///  - `template` - the template to use for each documentation page
    ///  - `root` - The root url of the generated documentation within the website
    ///  - `qualify` - qualify the output set by collection name, e.g. `reference/FSharp.Core/...`
    ///  - `libDirs` - Use this to specify additional paths where referenced DLL files can be found when formatting code snippets inside Markdown comments
    ///  - `otherFlags` - Additional flags that are passed to the F# compiler to specify references explicitly etc.
    ///  - `urlRangeHighlight` - A function that can be used to override the default way of generating GitHub links
    ///
    static member GenerateHtml(inputs, output, collectionName, substitutions, ?template, ?root, ?qualify, ?libDirs, ?otherFlags, ?urlRangeHighlight) =
        let root = defaultArg root "/"
        let qualify = defaultArg qualify false
        let model =
            ApiDocModel.Generate(inputs, collectionName=collectionName,
                libDirs=libDirs, qualify=qualify, otherFlags=otherFlags, 
                urlRangeHighlight=urlRangeHighlight, root=root, substitutions=substitutions) 
        let renderer = GenerateHtml.HtmlRender(model)
        let index = GenerateSearchIndex.searchIndexEntriesForModel(model)
        renderer.Generate(output, template, collectionName, renderer.GlobalSubstitutions)
        model,index
